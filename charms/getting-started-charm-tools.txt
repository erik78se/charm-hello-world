In this tutorial, you will learn how to get started with the basics of developing a juju charm.
Thers are some official documentation on Canonical homepage that takes you through a similar process,
but personally I found it a bit too heavy, so I decided to make my own tutorial covering a really minimal
case to get started. 

This juju charm will install a package, implement the hooks "install", "start", "stop", "config-changed".
These hooks are the bare minimum a charm needs to implement to be useful in a getting started context.

Lets go through the prerequisistes for this tutorial.

# Ubuntu, charm-tools & juju
The tutorial is performed on a Ubuntu 16.04.1 LTS 64 bit operating system.
The reason is that we are going to make use of the "charm-tools" package to help us
through the charm build process. 

The version of juju is juju-2.0. If you run on earlier versions, you might experience problems
deploying the hello-world charm from a "local repository".

I will assume you have a running instance of juju on your local host. Verify that its operational by running:

juju status.

If nothing goes wrong, you are all set up OK.

# Get the latest version of "charm-tools".
Even though you might succeed building a charm "manually" charm-tools are essential to make the build
process easy. Add the package repo to your apt-source by issuing the following commands:

sudo add-apt-repository ppa:juju/stable
sudo apt-get update
sudo apt-get install charm-tools

You now have charm-tools installed.

# Creating the hello-world charm.
The charm name will be "hello-world" and will demonstrate 3 things:

1. Create the formal requirements files (meta information) of our hello-world charm.
2. Implement four hooks that makes a charm useful: "install", "start", "stop", "config-changed"
3. Verify (proof) the hello-world charm.
4. Deploy the hello-world charm.
5. Remove the hello-world charm.

Lets create some working directories and use charm-tools to start the development.

mkdir -p juju/charms
cd juju/charms
charm-create hello-world

A new directory named "hello-world" is created which contrains the skeleton for our charm.
Lets fill in some metadata for our charm to make it compliant with a good charm.

# Edit README and copyright
cd hello-world
mv README.ex README
vi README
vi copyright

# Edit metadata.yaml to look something like this

name: hello-world
summary: The hello-world charm
maintainer: erik_lonroth <erik.lonroth@gmail.com>
description: |
  This is the hello-world charm.
tags:
  - misc


# Implement the hooks
The hooks we are about to create are:

install - like packages and code etc. Perhaps also run ansible commands that installs your stuff.
start - for when the application needs to be started.
stop - for stopping it again.
config-changed - is run when configuration of a charm has been altered.

Inside the "juju/charms/hello-world" directory, create the hooks dir and create the files.

mkdir hooks
cd hooks
touch install start stop config-changed

## The config-changed hook code
#!/bin/bash
set -e
juju-log "config-changed hook was run"

## The install hook code
#!/bin/bash
set -e
status-set maintenance "Installing zip package."
sudo apt -y install zip
juju-log "Installed zip"

## The start hook code
#!/bin/bash
set -e
status-set active "Started hello-world"

## The stop hook code
#!/bin/bash
status-set maintenance "Stopped for maintenance"

Make the scripts executable
chmod +x *

# Verify the charm
charm proof hello-world

# Deploy
juju deploy ~/charms/hello-world --series xenial

# Watch it start
juju status

